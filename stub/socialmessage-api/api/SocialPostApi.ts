/**
 * Social Message API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model/models';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class SocialPostApi {
    protected basePath = 'http://localhost:10010/';
    public defaultHeaders : Headers = new Headers();

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * 
     * Deletes the feed for the provided id
     * @param idToken 
     * @param id Id of the feed to be deleted
     */
    public deleteSocialPostById (idToken: string, id: string, extraHttpRequestParams?: any ) : Observable<models.GeneralResponse> {
        const path = this.basePath + '/socialPost/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'idToken' is not null or undefined
        if (idToken === null || idToken === undefined) {
            throw new Error('Required parameter idToken was null or undefined when calling deleteSocialPostById.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteSocialPostById.');
        }
            headerParams.set('idToken', String(idToken));

        let requestOptions: RequestOptionsArgs = {
            method: 'DELETE',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Returns the feed for the supplied id to the caller
     * @param idToken 
     * @param id Id of the feed to be returned
     */
    public getSocialPostById (idToken: string, id: string, extraHttpRequestParams?: any ) : Observable<Array<models.SocialPost>> {
        const path = this.basePath + '/socialPost/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'idToken' is not null or undefined
        if (idToken === null || idToken === undefined) {
            throw new Error('Required parameter idToken was null or undefined when calling getSocialPostById.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getSocialPostById.');
        }
            headerParams.set('idToken', String(idToken));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Returns list of feeds to caller
     * @param id 
     * @param idToken 
     */
    public getSocialPosts (id: string, idToken: string, extraHttpRequestParams?: any ) : Observable<Array<models.SocialPost>> {
        const path = this.basePath + '/feed/{id}/socialPosts'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getSocialPosts.');
        }
        // verify required parameter 'idToken' is not null or undefined
        if (idToken === null || idToken === undefined) {
            throw new Error('Required parameter idToken was null or undefined when calling getSocialPosts.');
        }
            headerParams.set('idToken', String(idToken));

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Create a feed
     * @param id 
     * @param idtoken 
     * @param socialPosts 
     */
    public postSocialPost (id: string, idtoken: string, socialPosts: Array<models.SocialPost>, extraHttpRequestParams?: any ) : Observable<Array<models.SocialPost>> {
        const path = this.basePath + '/feed/{id}/socialPosts'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling postSocialPost.');
        }
        // verify required parameter 'idtoken' is not null or undefined
        if (idtoken === null || idtoken === undefined) {
            throw new Error('Required parameter idtoken was null or undefined when calling postSocialPost.');
        }
        // verify required parameter 'socialPosts' is not null or undefined
        if (socialPosts === null || socialPosts === undefined) {
            throw new Error('Required parameter socialPosts was null or undefined when calling postSocialPost.');
        }
            headerParams.set('idtoken', String(idtoken));

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(socialPosts);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * 
     * Update an existing feed
     * @param idToken 
     * @param id 
     * @param socialPost 
     */
    public putSocialPostById (idToken: string, id: string, socialPost: models.SocialPost, extraHttpRequestParams?: any ) : Observable<models.PutResponse> {
        const path = this.basePath + '/socialPost/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'idToken' is not null or undefined
        if (idToken === null || idToken === undefined) {
            throw new Error('Required parameter idToken was null or undefined when calling putSocialPostById.');
        }
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling putSocialPostById.');
        }
        // verify required parameter 'socialPost' is not null or undefined
        if (socialPost === null || socialPost === undefined) {
            throw new Error('Required parameter socialPost was null or undefined when calling putSocialPostById.');
        }
            headerParams.set('idToken', String(idToken));

        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(socialPost);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
